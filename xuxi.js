//   X·ª¨ L√ù COMPUTER
// m·∫£ng c√°c gi√° tr·ªã 
const VALUES = [
    { id: 'scissors', value: "‚úåÔ∏è" }, // [0]
    { id: 'rock', value: "‚úä" }, // [1]
    { id: 'paper', value: "üñê" },  //[2]
]


const handleChange = () => {
    const i = Math.floor(Math.random() * 3);
    const computer = document.querySelector('#computer');
    computer.textContent = VALUES[i].value; // textContent gi·ªëng v·ªõi innerHTML

    computer.dataset.id = VALUES[i].id; // Khi ch·∫°y n√≥ s·∫Ω th√™m attribute v√†o th·∫ª c·ªßa ch√∫ng ta dataset-id=""
}

// Trong js c√≥ h·ªó tr·ª£ ch√∫ng ta m·ªôt h√†m l·∫∑p ƒëi l·∫∑p l·∫°i 1 h√†nh ƒë·ªông trong m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh - setInterval
// setInterval(callback, milisecond) return ra m·ªôt ky gi√∫p ng·ª´ng h√†nh ƒë·ªông n√†y

let interval = setInterval(handleChange, 100);
// clearInterval(interval) => Ng·ª´ng s·ª± l·∫∑p l·∫°i c·ªßa h√†m interval

// H√ÄM SO S√ÅNH K·∫æT QU·∫¢ TR·∫¢ RA K·∫æT QU·∫¢ -1 0 1
const compare = (valuePlayer, valueComputer) => {
    const indexUser = VALUES.findIndex(item => item.id === valuePlayer); // nh·∫≠n index
    const indexComputer = VALUES.findIndex(item => item.id === valueComputer); // nh·∫≠n index
    let check = indexUser - indexComputer;
    // th·∫Øng: check =  1, -2 
    if ([1, -2].includes(check)) {
        return 1;
    } else if (check === 0) {
        return 0;
    } else {
        return -1;
    }
}

// X·ª¨ L√ù uSER
const playerItem = document.querySelectorAll('.user'); // ƒë∆∞·ª£c m·∫£ng 3 n√∫t 
// S·ª±u ki·ªán khi click v√†o m·ªôt l·ª±a ch·ªçn
playerItem.forEach(item => {
    item.addEventListener("click", event => {
        clearInterval(interval);
        playerItem.forEach(_item => {
            _item.classList.remove('active');// N·∫øu click s·∫Ω x√≥a ƒëi 'active' c·ªßa th·∫ª d√≥
            _item.style.pointerEvents = 'none'; // ch·∫∑n s·ª± ki·ªán click 
        })

        event.target.classList.add('active');// click v√†o th·∫±ng n√†o th√¨ th·∫±ng ƒë√≥ c√≥ active
        const playerValue = event.target.id;
        const computerValue = document.querySelector('#computer').dataset.id; // computer.dataset.id = VALUES[i].id;
        let result = compare(playerValue, computerValue);
        console.log(result);
        // T·∫°o th√¥ng b√°o 
        const newAlert = document.createElement('div');
        newAlert.classList.add('alert');
        let msg = '';
        if (result == 1) {
            msg = 'B·∫°n th·∫Øng, b·∫°n l√† nh·∫•t!';
            newAlert.classList.add('alert-success');

        } else if (result === 0) {
            msg = 'B·∫°n h√≤a';
            newAlert.classList.add('alert-warning');
        } else if (result === -1) {
            msg = 'B·∫°n thua, b·∫°n g√† w√°!'
            newAlert.classList.add('alert-dark');
        }
        newAlert.textContent = msg;
        const notification = document.querySelector('.notification');
        notification.appendChild(newAlert);
        document.querySelector('#play-again').classList.remove('d-none');
    })
})

// X·ª¨ L√ù BTN CH∆†I L·∫†I
document.querySelector('.btn-play-again').addEventListener('click', event => {
    //1.B·ªè active
    playerItem.forEach(_item => {
        _item.classList.remove('active');// N·∫øu click s·∫Ω x√≥a ƒëi 'active' c·ªßa th·∫ª d√≥
        _item.style.pointerEvents = ''
    })
    //2. x√≥a notification
    document.querySelector('.notification').innerHTML = '';

    //3. ch·∫°y l·∫°i inteVval
    clearInterval(interval);
    interval = setInterval(handleChange, 100);
})
